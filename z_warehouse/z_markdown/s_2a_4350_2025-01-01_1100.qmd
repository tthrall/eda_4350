---
title: "Clustering: EDA in Higher Dimensions"
subtitle: "Part 1, session 2a of Data Mining Intro"
author: 
  - name: "Send comments to: Tony T (adthral)"
date: "`r format(Sys.time(), '%Y-%m-%d %H:%M', usetz = TRUE)`"
output: 
  html_document:
    toc: true
    df_print: paged
    mathjax: default
  word_document:
    toc: true
    df_print: tibble
  pdf_document:
    toc: true
    df_print: tibble
abstract: 
  "Introduce statistical clustering methods."
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo    = FALSE, 
  error   = FALSE, 
  message = FALSE, 
  warning = FALSE
)
```

```{r libraries}
library(assertthat)
library(GGally)
library(here)
library(ISLR2)
library(latex2exp)
library(pracma)
library(tidyverse)
library(tinytex)
library(UsingR)

```

```{r local_source}
# if needed, load local code as follows

# source(here("code", "handedness_data.R"))
```

------------------------------------------------------------------------

## Initial Remarks

In the context of machine learning, "unsupervised learning" encompasses algorithms designed to seek patterns in data, with minimal required guidance from the user, and without the benefit of a response variable (or a set of observation "labels") to be approximated by functions of predictor variables.  Most but not all of these algorithms are designed for high-dimensional data, that is, data with many variables (columns).

This approach is in the spirit of exploratory data analysis (EDA), which is practically forced upon us when we come across a new data set (and can remain essential throughout the life-cycle of a project). On the one hand, EDA has no sharp measures of success that we are driven to optimize, so one might say that we're strolling through the data, taking in the scenery. On the other hand, we are looking for unanticipated patterns in the data, and therefore it is useful to record just what patterns we do anticipate, conjecture, or wonder about.

In our previous sessions we have reviewed some ways of looking at one or two variables at a time. When we are presented with a new data set having many variables, it is useful to simplify the data in some way to help us form a first impression.

One way is to look for a few functions of the many variables that somehow carry much of the original information. The prime method for doing so is principal component analysis (PCA), where the functions are linear and capture much of the variation in the data. We'll come back to PCA in subsequent sessions.

In this session we'll discuss another way to simplify the data, namely, to group observations having similar profiles (patterns in the values of the variables). Such clustering methods are currently of great interest in both science and industry, giving rise to a number of new clustering methods.

## US Colleges

```{r college}
college <- ISLR2::College |> 
  as_tibble(rownames = "college_name")
```

```{r college_vars_tbl}
college_vars_tbl <- tibble::tibble(
  var_name = names(college),
) |> 
  mutate(
    dscr = case_when(
      var_name == "college_name" ~ 
        "Name of the college or university", 
      var_name == "Private" ~ 
        "No or Yes indicating private or public", 
      var_name == "Apps" ~ 
        "Number of applications received", 
      var_name == "Accept" ~ 
        "Number of applications accepted", 
      var_name == "Enroll" ~ 
        "Number of new students enrolled", 
      var_name == "Top10perc" ~ 
        "Pct. new students from top 10% of H.S. class", 
      var_name == "Top25perc" ~ 
        "Pct. new students from top 25% of H.S. class", 
      var_name == "F.Undergrad" ~ 
        "Number of fulltime undergraduates", 
      var_name == "P.Undergrad" ~ 
        "Number of parttime undergraduates", 
      var_name == "Outstate" ~ 
        "Out-of-state tuition", 
      var_name == "Room.Board" ~ 
        "Room and board costs", 
      var_name == "Books" ~ 
        "Estimated book costs", 
      var_name == "Personal" ~ 
        "Estimated personal spending", 
      var_name == "PhD" ~ 
        "Pct. of faculty with PhD's", 
      var_name == "Terminal" ~ 
        "Pct. of faculty with terminal degree", 
      var_name == "S.F.Ratio" ~ 
        "Student/faculty ratio", 
      var_name == "perc.alumni" ~ 
        "Pct. alumni who donate", 
      var_name == "Expend" ~ 
        "Instructional expenditure per student", 
      var_name == "Grad.Rate" ~ 
        "Graduation rate"
    )
  )
```

To illustrate ideas we'll use data about US universities and colleges from 1995, described in the book, *An Introduction to Statistical Learning with applications in R* ([ISLR](https://www.statlearning.com)). The data are recorded within the R package `ISLR2` as `ISLR2::College`.  From the R command `help("College")` we see that the data consist of 777 observations (data rows), and obtain the following description of the variables (data columns).

```{r college_vars_tbl__kable}
college_vars_tbl |> knitr::kable(
  caption = "US college variables (1995 issue of USNWR)", 
  col.names = c("variable", "description")
)
```

## Class Exercise

Team up with a classmate and make your own copy of the `ISLR2::College` data.  Record your questions and conjectures about the data.  Which of these could be addressed by the set of data variables?  Take 15 minutes to prepare to report out to the class.

## Grouping Variables

Clustering algorithms construct groups of observations based solely on statistical information obtained from a given data set, with no reliance on the meaning or importance of data variables.

A complementary way to form groups is to use so-called "grouping variables" that we select or construct from the data.  Often, the grouping variables are evident from the questions we're trying to answer, e.g., to compare spending patterns among different socio-economic groups.

### College data example

In our present situation, we are merely seeking to become more familiar with the US college data.  Let's choose a few variables to group the data as a starting point for discussing what we seek from the grouping of observations.

Consider the distinction between more expensive versus less expensive schools as indicated by variable `Expend`.  We might ask, "Are the more expensive schools able to attact more of the top students?"  So let's also use the variable `Top10perc`.  We'll simply split each variable at its median value, creating two binary variables, which we'll use as our grouping variables.

Before proceeding, let's examine the distribution of these variables via density estimates and a scatter plot.

```{r college_factors}
# split selected variables at their median value
college_factors <- college |> 
  mutate(
    top_10_fct = Top10perc  < median(Top10perc),
    expend_fct = Expend     < median(Expend)
  ) |> 
  # for binary factors above, re-code (T, F) to ("lwr", "upr")
  mutate(across(
    .cols = c(top_10_fct, expend_fct), 
    .fns  = ~ if_else(.x, "lwr", "upr")
  )) |> 
  # label each group with a bitcode
  mutate(
    top_10_lbl = if_else(top_10_fct == "lwr", 0L, 1L), 
    expend_lbl = if_else(expend_fct == "lwr", 0L, 1L), 
    grp_lbl    = paste0("g_", top_10_lbl, expend_lbl)
  ) |> 
  # remove redundant labeling vars
  dplyr::select(- top_10_lbl, - expend_lbl)

# record the median values
top_10_mid  <- median(college_factors$ Top10perc)
expend_mid  <- median(college_factors$ Expend)
```

```{r g_grp_var_matrix}
# Form a matrix of figures, showing each 
# distinct pair of variables in a scatter diagram.
g_grp_var_matrix <- college_factors |> 
  GGally::ggpairs(
    columns = c("Top10perc", "Expend")
  )
g_grp_var_matrix
```

We see that `Top10perc` and `Expend` are positively correlated, and have just a few departures from a monotonic relationship.  Also note that `Expend` is measured (in US dollars) on a very different scale from `Top10perc`.

Now let's look at the two variables more closely, one at a time.

```{r g_top_10}
g_top_10 <- college_factors |> 
  ggplot(mapping = aes(x = Top10perc)) + 
  geom_histogram() + 
  geom_vline(
    xintercept = top_10_mid, linewidth = 2, colour = "red"
  ) + 
  labs(
    title = "% of new students from top 10% in their HS", 
    subtitle = "(vertical line at median)"
  )
g_top_10
```

```{r g_Expend}
g_Expend <- college_factors |> 
  ggplot(mapping = aes(x = Expend)) + 
  geom_histogram() + 
  geom_vline(
    xintercept = expend_mid, linewidth = 2, colour = "red"
  ) + 
  labs(
    title = "Instructional expenditure per student", 
    subtitle = "(vertical line at median)"
  )
g_Expend
```

The figures above show decent variation on either side of the median value.  Therefore cutting each variable at its median value is not unduly distorting, as long as we bear in mind that each distribution has a right tail (a quite long tail for `Expend`).

For each of the variables shown we create a binary variable having two levels, "lwr" and "upr", meaning an observation is either below the median value, or else is no less than the median value.  We then form 4 groups, each a combination of levels of the 2 binary variables, which we label $g_{00}, g_{01}, g_{10}, g_{11}$ to denote the binary factors based on `Top10perc`, and `Expend` (in that order), with {"lwr", "upr"} coded as {0, 1}.

To check our this grouping of the data let's first select the variables from which we defined the 4 groups and examine the scatter diagram, now using the color and shape of each data point to distinguish the different groups.

```{r g_top_10_Expend}
g_top_10_Expend <- college_factors |> 
  ggplot(mapping = aes(
    x = Top10perc, y = Expend, 
    colour = grp_lbl, shape = grp_lbl
  )) + 
  scale_shape_manual(values = 0:3) +
  geom_point() + 
  labs(
    title = "(Top10perc, Expend)", 
    subtitle = "grouped by binary versions of the two variables"
  )
g_top_10_Expend
```

The figure above confirms that we have constructed the binary grouping variables as we intended.

The table below shows the mean per group of the underlying grouping variables.

```{r means_per_grp}
means_per_grp <- college_factors |> 
  # remove original non-numeric variables
  dplyr::select(- college_name, - Private) |> 
  # reduce grouping variables to just grp_lbl
  dplyr::select(- top_10_fct, - expend_fct) |> 
  # vector of mean values per group
  summarise(across(
    .cols = everything(), 
    .fns  = ~ mean(.x, na.rm = TRUE)
  ), 
  # grouping variable
  .by = "grp_lbl", 
  # group size: number of original data rows per group
  count = n()
  ) |> 
  arrange(grp_lbl)
```

```{r means_per_grp__kable}
means_per_grp |> 
  dplyr::select(
    grp_lbl, count, Top10perc, Expend
  ) |> 
  knitr::kable(
    caption = "Mean values per group of underlying grouping variables", 
    col.names = c("group", "# obs", "Top10perc", "Expend"), 
    digits = 1
  )
  
```

### Measures of clustering effectiveness

In the context of clustering algorithms, groups are not given but are rather to be calculated from the data.  But under what criteria?  Broadly speaking we want the points (each an observation of numeric variables) to be close together within each cluster (group), and we want the clusters to be well separated from one another.

So how well do the groups constructed above perform against these criteria?  We must decide how to measure distance between points.  Euclidean distance springs to mind, but there is a catch: the numeric variables are recorded on differing scales.

### Standardizing variables

The following table lists the mean, standard deviation, and coefficient of variation $(cv = \frac{sd}{mean})$ per variable.  The variables having the largest mean value are listed first.

```{r college_moments}
# calculate unconditional mean and sd of each numeric variable

college_means <- college_factors |> 
  # remove original non-numeric variables
  dplyr::select(- college_name, - Private) |> 
  # remove grouping variables
  dplyr::select(- top_10_fct, - expend_fct, - grp_lbl) |> 
  # vector of mean values per group
  summarise(across(
    .cols = everything(), 
    .fns  = ~ mean(.x, na.rm = TRUE)
  )) |> 
  # pivot row vector to column vector
  pivot_longer(
    cols = everything(), 
    names_to = "var", 
    values_to = "mean"
  )

college_std_devs <- college_factors |> 
  # remove original non-numeric variables
  dplyr::select(- college_name, - Private) |> 
  # remove grouping variables
  dplyr::select(- top_10_fct, - expend_fct, - grp_lbl) |> 
  # vector of mean values per group
  summarise(across(
    .cols = everything(), 
    .fns  = ~ sd(.x, na.rm = TRUE)
  )) |> 
  # pivot row vector to column vector
  pivot_longer(
    cols = everything(), 
    names_to = "var", 
    values_to = "sd"
  )

college_moments <- college_means |> 
  left_join(
    y  = college_std_devs, 
    by = "var"
  ) |> 
  mutate(cv = sd / mean) |> 
  arrange(desc(mean))
```

```{r college_moments__kable}
college_moments |> knitr::kable(
  caption = "Mean, SD, and CV = SD/Mean", 
  col.names = c("variable", "mean", "sd", "cv"), 
  digits = 1
)
```

The financial variables are measured in thousands of dollars, whereas the percentages merely range from 0 to 100.  The percentages thus contribute little to the overall Euclidean distance from a point (vector of observed numeric values) to a mean vector.  Consequently the percentages will have little influence on calculations of clustering effectiveness based on Euclidean distances.

This issue can be addressed in a few different ways.  For now we standardize each numeric variable: subtract the overall mean of the variable (across all observations) and then divide by the corresponding standard deviation of the variable.  This will make the respective scales of the variables more compatible.

### Within-cluster distances in standard units

Having standardized the college numeric variables we now apply Euclidean distance.  That is, within each group we calculate the distance of each point to the group mean vector.  This vector of point-minus-mean is referred to as "error" in statistical parlance.  We calculate the squared Euclidean length of this vector, and sum these squared distances across all points in the group.  The result is called the (within-group) sum of squared errors (SSE).  Here are the calculated SSE values per group.

```{r college_z_scores}
# convert numeric data into standard units (z-scores)
college_z_scores <- college_factors |> 
  # remove original non-numeric variables
  dplyr::select(- college_name, - Private) |> 
  # grouping variables: use only grp_lbl
  dplyr::select(- top_10_fct, - expend_fct) |> 
  # standardize numeric variables
  mutate(across(
    .cols = - grp_lbl, 
    .fns  = ~ (.x - mean(.x))/sd(.x)
  ))
```

```{r coll_z_stats_per_grp}
# compute z-score means and std-devs per group

# number of observations per group as a data frame
coll_counts_per_grp <- college_z_scores |> 
  summarise(
    .by = grp_lbl, 
    count = n()
  ) |> 
  arrange(grp_lbl) |> 
  column_to_rownames("grp_lbl")

coll_z_means_per_grp <- college_z_scores |> 
  summarise(
    .by = grp_lbl, 
    across(
      .cols = everything(), 
      .fns  = ~ mean(.x, na.rm = TRUE)
    )
  ) |> 
  arrange(grp_lbl)

coll_z_sds_per_grp <- college_z_scores |> 
  summarise(
    .by = grp_lbl, 
    across(
      .cols = everything(), 
      .fns  = ~ sd(.x, na.rm = TRUE)
    )
  ) |> 
  arrange(grp_lbl)

# transpose coll_z_sds_per_grp
grp_z_sds_per_var <- coll_z_sds_per_grp |> 
  column_to_rownames("grp_lbl") |> 
  t() |> 
  as_tibble(rownames = "var")

grp_z_ss <- grp_z_sds_per_var |> 
  # (RMSE per var) to (MSE per var)
  mutate(across(
    .cols = - var, 
    .fns  = ~ .x^2
  )) |> 
  # MSE to SSE (per var)
  mutate(
    g_00 = g_00 * (-1 + coll_counts_per_grp[["g_00", "count"]]), 
    g_01 = g_01 * (-1 + coll_counts_per_grp[["g_01", "count"]]), 
    g_10 = g_10 * (-1 + coll_counts_per_grp[["g_10", "count"]]), 
    g_11 = g_11 * (-1 + coll_counts_per_grp[["g_11", "count"]])
  ) |> 
  # sum (SSE per var) across vars
  summarise(across(
    .cols = - var, 
    .fns  = ~ sum(.x, na.rm = TRUE)
  )) |> 
  # facilitate summing across groups
  pivot_longer(
    cols = everything(), 
    names_to = "group", 
    values_to = "SSE"
  )

# within sum of squares (across groups)
grp_z_ss_all <- sum(grp_z_ss$SSE, na.rm = TRUE)
```

```{r grp_z_ss__kable}
grp_z_ss |> knitr::kable(
  caption = "SSE: sum of squared point-center distances per group", 
  digits = 1
)
```

The sum of SSE across groups (the "total within-group SSE") turns out to be `r as.integer(round(grp_z_ss_all))`.

### RESUME EDITING HERE

REVISE: In the section above we restricted attention to the underlying grouping variables, but the criteria apply to all the numeric variables.  Here's a summary per group of the squared distance from each data point in a group to the vector of mean values for that group.

```{r std_devs_per_grp}
# std_devs_per_grp <- college_factors |> 
#   # remove original non-numeric variables
#   dplyr::select(- college_name, - Private) |> 
#   # reduce grouping variables to just grp_lbl
#   dplyr::select(- top_10_fct, - expend_fct) |> 
#   # vector of mean values per group
#   summarise(across(
#     .cols = everything(), 
#     .fns  = ~ sd(.x, na.rm = TRUE)
#   ), 
#   # grouping variable
#   .by = "grp_lbl", 
#   # group size: number of original data rows per group
#   count = n()
#   ) |> 
#   arrange(grp_lbl)
```

## K-means Clustering

We'll start our discussion of clustering using a function in the R `stats` package, namely `stats::kmeans()`.  The function requires us to specify either the desired number $K$ of clusters (groups) of observations to be formed, or else to provide an initial set of $K$ cluster centers. If we merely provide the desired number $K$ of clusters, `kmeans()` randomly selects $K$ data rows (observations) as the initial set of cluster centers. 

Given a set of cluster centers the algorithm iteratively searches for a better set, meaning a set having a smaller "within-cluster sum of squares".  In broad terms, this is done in two steps.

  1.  Assign: the algorithm assigns each data point to the nearest center (in Euclidean distance) thereby partitioning the data points into $K$ clusters.
  1.  Update: For each cluster of data points, the algorihtm calculates a new cluster center, namely, the mean vector of the data points within the cluster.  This yields a new set of cluster centers.
  
Convergence criteria: For each cluster the algorithm adds up the (point, center) squared distances.  Those $K$ sums of squares are summed to form the "within-cluster sum of squares (WCSS)".  In addition the algorithm records the grand mean vector, the average across the entire data set and forms a weighted sum of the squared (cluster-center, grand-mean) Euclidean distances, which is called the "between-cluster sum of squares (BCSS)".  The algorithm concludes the search when cluster-membership no longer changes, or when the decrease in WCSS is sufficiently small.

### Results for specified inital cluster centers

The figures and table immediately above serve to check that we've not made some error in the formation of the 8 groups.  Calculated, but not shown, are the mean values per group of the remaining numeric variables.

Now let's see the clusters that the `kmeans()` function devises when we provide it with initial cluster centers.  For each of our 8 groups we calculated a vector of mean values across 18 numeric variables.  We now provide these 8 vectors of mean values as 8 initial cluster centers to the `kmeans()` function.[^cc_matrix]

[^cc_matrix]: `kmeans()` expects the cluster centers to be expressed as a matrix, in which each _row_ represents a single cluster center and each column  represents a "coordinate" of the cluster centers that matches and is labeled as one of the numeric variables (columns) of the data matrix.

The resulting clusters are shown in the scatter diagrams below, where for purposes of comparison we have projected the clusters onto the grouping variables we previously adopted.

```{r m_kmeans_ctrs}
# # to ensure reproducibility, set random seed
# set.seed(42) # nod to Hitchhiker's Guide to the Galaxy
# 
# # use means_per_grp as initial cluster centers
# m_kmeans_ctrs <- college_factors |> 
#   # retain only original numeric variables and enroll_pct
#   dplyr::select(
#     - college_name, - Private, - (enroll_fct:grp_lbl)
#   ) |> 
#   kmeans(
#     centers = means_per_grp |> 
#       # retain only original numeric variables and enroll_pct
#       dplyr::select(
#         - grp_lbl, - count
#       )
#   )
```

```{r college_km_ctrs}
# # assign observations to km clusters
# college_km_ctrs <- college_factors |> 
#   mutate(cluster = m_kmeans_ctrs$ cluster)
```

```{r g_enroll_top_10_kmc}
# g_enroll_top_10_kmc <- college_km_ctrs |> 
#   mutate(cluster = as_factor(cluster)) |> 
#   ggplot(mapping = aes(
#     x = enroll_pct, y = Top10perc, 
#     colour = cluster, shape = cluster
#   )) + 
#   scale_shape_manual(values = 0:7) +
#   geom_point() + 
#   labs(
#     title = "(enroll_pct, Top10perc)", 
#     subtitle = "grouping variables (1, 2)"
#   )
# g_enroll_top_10_kmc
```

```{r g_enroll_Expend_kmc}
# g_enroll_Expend_kmc <- college_km_ctrs |> 
#   mutate(cluster = as_factor(cluster)) |> 
#   ggplot(mapping = aes(
#     x = enroll_pct, y = Expend, 
#     colour = cluster, shape = cluster
#   )) + 
#   scale_shape_manual(values = 0:7) + 
#   geom_point() + 
#   labs(
#     title = "(enroll_pct, Expend)", 
#     subtitle = "grouping variables (1, 3)"
#   )
# g_enroll_Expend_kmc
```

```{r g_top_10_Expend_kmc}
# g_top_10_Expend_kmc <- college_km_ctrs |> 
#   mutate(cluster = as_factor(cluster)) |> 
#   ggplot(mapping = aes(
#     x = Top10perc, y = Expend, 
#     colour = cluster, shape = cluster
#   )) + 
#   scale_shape_manual(values = 0:7) + 
#   geom_point() + 
#   labs(
#     title = "(Top10perc, Expend)", 
#     subtitle = "grouping variables (2, 3)"
#   )
# g_top_10_Expend_kmc
```

```{r km_ctr_tbl}
# # reformat cluster centers as a tibble
# km_ctr_tbl <- m_kmeans_ctrs$ centers |> 
#   as_tibble(rownames = "cluster") |> 
#   mutate(cluster = as.integer(cluster)) |> 
#   dplyr::select(cluster, everything())
```

```{r km_ctr_tbl__kable}
# km_ctr_tbl |> 
#   dplyr::select(cluster, enroll_pct, Top10perc, Expend) |> 
#   knitr::kable(
#   caption = "K-means: grouping variable means per cluster", 
#   digits = 1
# )
```

REVISE: The clusters formed by `kmeans()` seem rather similar to our original groups.  If we scrutinize the `kmeans()` clustering shown above, we can see that the clusters closely follow the `Expend` variable, which may be due to the large scale of that variable.

### Results for random inital cluster centers



### Which value of $K$?



## Other clustering algorithms



## Team Exercises



## Resources

[An Introduction to Statistical Learning](https://www.statlearning.com/) by James, Witten, Hastie, & Tibshirani

[K-means clustering with tidy data principles – tidymodels](https://www.tidymodels.org/learn/statistics/k-means/)
